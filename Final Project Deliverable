SNHU Travel Sprint Retrospective
The various roles on our Scrum-agile Team specifically contributed to the success of our SNHU Travel project as follows: Our product owner worked to communicate the needs of the stakeholders to us. The product owner initially met with the stakeholder to find their needs and assess whether we could complete the deliverables in a time and budget friendly manner. The product owner also did most of the backlog grooming, which really helped to ensure the entire development team knew what was coming next. Finally, the product owner met with the stakeholder’s customers to create a focus group and further clarify stakeholder needs. This included alerting the team when needs changed.
Our scrum master contributed to our success by leading the team. While the product owner did most of the communication with the stakeholders, the scrum master picked the team for the project, and started the design process. They also ensured communication stayed open between members, and kept track of sprint iterations to make sure that deliverables were being done on time. 
Our tester helped ensure success by making the process clearer. While our scrum master and product owner together came up with the deliverables, it was the tester that outlined what needed to be functional for an item to be considered done. This kept us on track and made things more efficient for everyone. There was no waffling on how done anything needed to be, as long as it was functional.
Our developer, of course, helped by developing the product. They worked with everyone involved to actually build the deliverable, and communicated with the tester, scrum master, and occasionally the product owner, to ensure they were building the right deliverable.
The Scrum-agile approach to the SDLC helped each of the user stories come to completion because it allowed us to stay flexible. For example, when our tester requested further clarification on what the test cases should be, the test cases changed some. Being able to stay flexible when it might take more work to complete the revised test case was crucial. If we had taken a waterfall approach, we might have blocked ourselves in and not been able to meet the revised test case.
A Scrum-agile approach supported project completion when the project was interrupted because the focus shifted to mainly wellness resorts. While functionally, the idea was still to build a travel website, we now had to revise a lot of data on where we would be getting our travel packages from. Additionally, as wellness retreats are generally more expensive, this changed the clientele we were targeting and other features, such as price filtering. However, because we had only worked through a few of the user stories in earlier iterations, we did not have to scrap the whole project. Additionally, because the earlier iterations had been done so thoroughly- i.e., tested during the iteration, been approved by the stakeholders, etc- we had a very good foundation to build off of. So while we did have to scrap some of our work, the foundations behind the website were good, and we just had to change some pieces of where we were getting our data, and some of the design of the website. During this project, I wrote some emails to other team members. I will specifically reference the email I wrote for the journal in module 4. It starts with a clear greeting- “Hello Product Owner,” and gives a brief background on what I have done so far, and what I need next. Then, I highlight my specific asks- in this example, I wanted information on the level the product would roll out at, and more information on the acceptance criteria and implementation of the user stories. 
This is an example of effective communication for a few reasons. By starting with a specific greeting, I make it clear that this was not an accidental email, and catch my reader’s attention. By giving context, I let my reader see my thought process, which gives them more information on why I need this information. Many people try to solve the problem they think they see versus the problem they are being asked to solve. This isn’t necessarily bad, it shows good critical thinking skills, but it can slow communication, especially on an Agile team. By giving background, I can skip the confusion. Finally, by highlighting exactly what it is I am asking for, I make my needs clear. Again, this avoids confusion and maximizes efficiency. Because my email is short, polite, and to the point, my team members are more likely to help me. Their time isn’t wasted, and they don’t feel overwhelmed because my ask was too unclear.
The organizational tools and Scrum-agile principles that helped my team be successful were multi-fold. The principles that were most important to this project included collaboration, time-boxing, and iterative development. Collaboration was important because we are a development team- not a lone developer. 
Tools that help with this principle include agile planning tools like JIRA and Microsoft Azure. These allow everyone in the team to see where user stories are at, which person has completed what, and what needs to be done next. They can also be used for Kanban boards, which is a great tool for time-boxing and iterative development. Kanban boards work as a way to display where user stories are at during a sprint. They can be in the “not started” section, the “in progress” section, and the “done” section. This allows for a clear delineation of where everything stands. This is an especially helpful approach during Daily Scrums, where everyone on the team can explain what task they got done yesterday, what they plan to work on today, and what challenges they might have. Any person on the team might move something into the “in progress” section and move something else into the “done” section. 
Iterative development refers to the ability to get things done in iterations, or sprints. The idea is that during a sprint, everything in that sprint is finished. Iterations should be able to stand alone. This became especially important when we had to adjust to make our website about a wellness resort, and because our previous sprints had been done so thoroughly, we did not need to scrap as much work as we may have otherwise needed to do.
The pros and cons that the Scrum-agile approach presented during the project are as follows: the pros included the ability to change plans without scrapping all of what we had. It also included good communication, which minimized wasted time, and kept people from getting frustrated. The cons are that because Agile emphasizes, well- agility, it also emphasizes speed. When plans changed, and we didn’t change the dates the deliverables were due, this caused some stress. We also could not give the stakeholders a clear and finite end, which I imagine must be frustrating. Especially as agile is newer, stakeholders are used to a “due date” and by not having one from the start, it may seem like the team is lazy, when the opposite is true. 
I think the scrum-agile approach was ultimately best for the SNHU Travel development project. Yes, agile has some disadvantages, but its flexibility and emphasis on value (particularly through complete user testing) was what allowed us to adjust quickly and still deliver a good project. 

